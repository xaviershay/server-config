#!/usr/bin/env ruby
require 'json'
require 'erb'

class TerraformGenerator
  TEMPLATE = <<~'TERRAFORM'
    # Initially auto-generated by bin/json-to-cloudflare-terraform
    provider "cloudflare" {
      # Configure via environment variables:
      # CLOUDFLARE_API_TOKEN or CLOUDFLARE_EMAIL and CLOUDFLARE_API_KEY
      api_token = var.cloudflare_api_token
    }

    variable "cloudflare_api_token" {
      type = string
    }

    variable "cloudflare_account_id" {
      type = string
    }

    module "cloudflare_label" {
      source  = "cloudposse/label/null"
      version = "0.25.0"
      
      namespace = "dns"
      delimiter = "_"
    }

    <%- zones.each do |zone| -%>
    module "zone_<%= zone_resource_name(zone[:name]) %>" {
      source = "cloudposse/zone/cloudflare"
      version = "1.0.1"

      zone = "<%= zone[:name] %>"
      account_id = var.cloudflare_account_id
      
      records = [
        <%- zone[:records].each do |record| -%>
        {
          name           = "<%= record[:name] %>"
          type           = "<%= record[:type] %>"
          ttl            = <%= record[:ttl] %>
          value          = <%= record[:content].inspect %>
          <%- if record[:priority] -%>
          priority       = <%= record[:priority] %>
          <%- end -%>
          proxied        = false
        },
        <%- end -%>
      ]

      context = module.cloudflare_label.context
    }

    <%- end -%>
  TERRAFORM

  def initialize(input_file)
    @dns_config = JSON.parse(File.read(input_file), symbolize_names: true)
  end

  def generate
    renderer = ERB.new(TEMPLATE, trim_mode: '-')
    renderer.result(binding)
  end

  private

  def zones
    @dns_config[:zones]
  end

  def zone_resource_name(zone_name)
    sanitize_resource_name(zone_name).tr('-', '_')
  end

  def sanitize_resource_name(name)
    # Convert to lowercase, replace dots and non-alphanumeric chars with dashes
    # (cloudposse convention uses dashes instead of underscores)
    name.to_s.downcase
        .gsub(/[^a-z0-9]+/, '-')
        .gsub(/^-+|-+$/, '') # Remove leading/trailing dashes
  end
end

def validate_dns_config(config)
  raise "Invalid JSON structure" unless config.is_a?(Hash)
  raise "Missing zones key" unless config.key?(:zones)
  raise "Zones must be an array" unless config[:zones].is_a?(Array)
  
  config[:zones].each do |zone|
    raise "Zone missing name" unless zone[:name]
    raise "Zone missing records" unless zone[:records].is_a?(Array)
    
    zone[:records].each do |record|
      %i[name type content ttl].each do |required_field|
        raise "Record missing #{required_field}" unless record[required_field]
      end
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  if ARGV.empty?
    puts "Usage: #{$PROGRAM_NAME} <dns_configuration.json>"
    exit 1
  end

  input_file = ARGV[0]
  
  unless File.exist?(input_file)
    puts "Error: Input file '#{input_file}' not found"
    exit 1
  end

  begin
    dns_config = JSON.parse(File.read(input_file), symbolize_names: true)
    validate_dns_config(dns_config)
    
    generator = TerraformGenerator.new(input_file)
    terraform_config = generator.generate
    
    output_file = 'dns.tf'
    File.write(output_file, terraform_config)
    
    puts "Terraform configuration generated in '#{output_file}'"
    puts "\nNote: Before applying, make sure to:"
    puts "1. Configure Cloudflare credentials"
    puts "2. Adjust the 'stage' value in the label module if needed"
    puts "3. Review the generated records carefully"
  rescue JSON::ParserError => e
    puts "Error: Invalid JSON in input file - #{e.message}"
    exit 1
  rescue StandardError => e
    puts "Error: #{e.message}"
    exit 1
  end
end
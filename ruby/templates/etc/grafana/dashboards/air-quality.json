{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "libraryPanel": {
        "name": "Temperature",
        "uid": "de9f16aco25fka"
      },
      "title": "Temperature"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "humidity"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "max"
            },
            "properties": [
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "min"
            },
            "properties": [
              {
                "id": "custom.lineWidth",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "max ESP8266-1"
            },
            "properties": [
              {
                "id": "custom.fillBelowTo",
                "value": "min ESP8266-1"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "max ESP8266-2"
            },
            "properties": [
              {
                "id": "custom.fillBelowTo",
                "value": "min ESP8266-2"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "max awair"
            },
            "properties": [
              {
                "id": "custom.fillBelowTo",
                "value": "min awair"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/min|max/"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": false
                }
              },
              {
                "id": "color",
                "value": {
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "mean ESP8266-1"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Bedroom"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "mean ESP8266-2"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Lounge"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "mean awair"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Office"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "data = from(bucket: \"sensors\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"air_quality\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"humid\")\r\n\r\nerror = (r) => if r.sensor =~ /awair/ then 2.0 else 5.0\r\n\r\nmeanValue = data\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n  |> keep(columns: [\"_time\", \"sensor\", \"_value\"])\r\n  |> map(fn: (r) => ({r with aggr: \"mean\"}))\r\n\r\nmaxValue = meanValue |> map(fn: (r) => ({r with aggr: \"max\", _value: r._value + error(r)}))\r\n\r\nminValue = meanValue |> map(fn: (r) => ({r with aggr: \"min\", _value: r._value - error(r)}))\r\n\r\nunion(tables: [meanValue, maxValue, minValue])\r\n  |> pivot(rowKey: [\"_time\", \"sensor\"], columnKey: [\"aggr\"], valueColumn: \"_value\")\r\n  |> yield(name: \"values\")\r\n",
          "refId": "A"
        }
      ],
      "title": "Humidity",
      "type": "timeseries"
    }
  ],
  "preload": false,
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Air Quality",
  "uid": "ce9eznqkdtloge",
  "version": 5,
  "weekStart": ""
}